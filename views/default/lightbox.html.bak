<head>
    <script language="javascript" type="text/javascript" src="../static/js/kinetic_min.js"></script>
</head>
<body>
    <canvas id="myCanvas" width="800" height="600" style="border:1px solid #000000;"></canvas>
</body>

<script>
    var canvas = document.getElementById('myCanvas');
    var context = canvas.getContext('2d');
    var number_of_columns = 3;
    var marginx;
    var marginy;
    var offsetx;

    var selected_image = -1;
    //var old_mousepos;
    var drag = false;

    function getMousePosition(canvas, event)
    {
        var rect = canvas.getBoundingClientRect();
        return {
            x: event.pageX - rect.left,
            y: event.pageY - rect.top
        };
    }

    function resizeCanvas() {
        canvas.width = window.innerWidth - (window.innerWidth * 0.03);
        canvas.height = window.innerHeight - (window.innerHeight * 0.03);
        marginx = canvas.width * 0.001;
        marginy = canvas.height * 0.001;
        offsetx = canvas.width * 0.08;
    }

    resizeCanvas();

    function img(source)
    {
        this.data = new Image();
        this.data.src = source;
        this.data.onload = function() {
            this.width = this.data.width;
            this.height = this.data.height;
        }
        this.draw = function(x, y, sizex, sizey) {
            context.drawImage(this.data, x, y, sizex, sizey);
        }
        //    context.drawImage(imageObj, marginx + (marginx * 2 * i) + (offsetx * i), marginy, offsetx, (offsetx / this.width) * this.height);
    }
    var imageArray = [];
    var img = [];

    for (var i = 0; i<5; i++)
    {
        imageArray.push('http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg');

        //imageArray[i].draw(marginx + (marginx * 2 * i) + (offsetx * i), marginy, offsetx, (offsetx / imageArray[i].width) * imageArray[i].height);
        //var imageObj = new Image();
        //imageObj.src = 'http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg';

        //imageObj.onload = function() {
        //    context.drawImage(imageObj, marginx + (marginx * 2 * i) + (offsetx * i), marginy, offsetx, (offsetx / this.width) * this.height);
        //}
        //imageArray.push(imageObj);
    }
    imageArray.push('http://www.html5canvastutorials.com/demos/assets/yoda.jpg');
    imageArray.push('http://www.html5canvastutorials.com/demos/assets/yoda.jpg');
    imageArray.push('http://images6.alphacoders.com/451/451028.jpg');
    imageArray.push('http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg');
    imageArray.push('http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg');
    imageArray.push('http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg');
    imageArray.push('http://www.html5canvastutorials.com/demos/assets/yoda.jpg');
    imageArray.push('http://www.html5canvastutorials.com/demos/assets/yoda.jpg');
    imageArray.push('http://desirewallpapers.com/wp-content/uploads/2014/08/New-Wallpapers.jpg');

    function loadImages(arr, callBack){
        var count = 0;

        for (var i in arr ){
            img[i] = new Image();
            img[i].src = arr[i];
            img[i].onload = function(){
                count++;
                if(count == arr.length){
                    callBack(img);
                }
            }
        }
    }

    function imageLoaded() {
        var offsety;
        var temp;
        var img_width, img_height;
        for (var i in imageArray) {
            offsety = 0;
            temp = i - number_of_columns + 1;
            while (temp > 0) {
                //offsety = offsety + (marginy * 2) + ((offsetx / img[temp-1].width) * img[temp-1].height);
                offsety = offsety + (marginy * 2) + offsetx;
                temp = temp - number_of_columns;
            }
            //context.drawImage(img[i], marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)), marginy + offsety, offsetx, (offsetx / img[i].width) * img[i].height);
            if (img[i].width > img[i].height)
            {
                img_width = offsetx;
                img_height = (offsetx / img[i].width) * img[i].height;
            }
            else
            {
                img_width = (offsetx / img[i].height) * img[i].width;
                img_height = offsetx;
            }
            context.drawImage(img[i], marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)) + ((offsetx - img_width) / 2), marginy + offsety + ((offsetx - img_height) / 2), img_width, img_height);
            context.rect((marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)), offsety, offsetx + (marginx * 2), offsetx + (marginy * 2));
            context.stroke();
        }
        //window.requestAnimationFrame(imageLoaded);
    }

    loadImages(imageArray, imageLoaded );

    function getImageMouseCollision(mousepos)
    {
        var result = -1;
        var temp = -1;
        for (var i = 1; i<number_of_columns+1; i++)
        {
            if (mousepos.x < i * (offsetx + 2 * marginx))
            {
                temp = i - 1;
                break;
            }
        }

        if (temp > -1)
        {
            var offsety = 0;
            var i;
            for (i = temp; i<imageArray.length; i = i + number_of_columns)
            {
                //width = (marginy * 2) + ((offsetx / img[i].width) * img[i].height);
                width = (marginy * 2) + offsetx;
                if (mousepos.y >= offsety && mousepos.y < offsety + width)
                {
                    result = i;
                    break;
                }
                offsety = offsety + width;
            }
            if (i >= imageArray.length)
            {
                result = -1;
            }
        }
        else
        {
            result = -1;
        }

        return result;
    }

    function mouseDownEvent(e)
    {
        var mousepos = getMousePosition(canvas, e);

        selected_image = getImageMouseCollision(mousepos);
        if (selected_image > -1)
        {
            drag = true;
            //old_mousepos = mousepos;
        }
    }
    function mouseMoveEvent(e)
    {
        if (drag)
        {
            drawScreenWithRect(getMousePosition(canvas, e), false);
        }
    }
    function mouseUpEvent(e)
    {
        if (drag)
        {
            drag = false;

            drop_image = getImageMouseCollision(getMousePosition(canvas, e));
            if (drop_image > -1 && drop_image != selected_image)
            {
                var temp_image = img[selected_image];
                img[selected_image] = img[drop_image];
                img[drop_image] = temp_image;
            }

            drawScreenWithRect(getMousePosition(canvas, e), true);
        }
    }

    canvas.onmousedown = mouseDownEvent;
    canvas.onmousemove = mouseMoveEvent;
    canvas.onmouseup = mouseUpEvent;

	function drawScreenWithRect(mousepos, erase) {
		context.fillStyle = "#ffffff";
		context.fillRect(0, 0, canvas.width, canvas.height);

		imageLoaded();

        if (!erase)
        {
            context.fillStyle = "#0000ff";
            context.fillRect(mousepos.x - 10, mousepos.y - 10, 20, 20);
        }
	}
    /*for (var i = 0; i<5; i++)
    {
        imageArray[i].onload = function() {
            context.drawImage(imageArray[i], marginx + (marginx * 2 * i) + (offsetx * i), marginy, offsetx, (offsetx / this.width) * this.height);
        };
    }*/
</script>
