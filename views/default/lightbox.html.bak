<head>
    <script language="javascript" type="text/javascript" src="../static/js/jquery_min.js"></script>
    <script language="javascript" type="text/javascript" src="../static/js/fabric_min.js"></script>
    <link rel="stylesheet" type="text/css" href="../static/css/font-awesome_min.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="../static/css/canvas.css" media="screen" />
</head>
<body>
    <form>
        <input type="file" id="images" name="images[]" style="display: none;" multiple></input>
	</form>
    <div id="buttons" class="buttons">
        <i class="fa fa-upload" id="btn_upload" onclick="upload_button_click()"></i>
        <i class="fa fa-plus-square" id="btn_show_add_group" onclick="show_add_group_button_click()"></i>
		<i class="fa fa-folder-open-o" id="btn_open_state_screen" onclick="open_state_button_click()"></i>
		<i class="fa fa-floppy-o" id="btn_save_state_screen" onclick="save_state_button_click()"></i>
        <div id="group_name_input" class="group_name_input">
            <input type="text" id="textbox_group_name"></input>
            <i class="fa fa-plus" id="btn_add_group" onclick="add_group_button_click()"></i>
        </div>
    </div>
    <div class="interface"><canvas id="interfaceCanvas" width="800" height="600"></canvas></div>
    <div id="imageMenu" class="imageMenu">
		<div id="context_link"><a href="#" onclick="linkClick('-1');return false;">Main</a></div>
		<canvas id="imageMenuCanvas" width="800" height="600"></canvas>
		<canvas id="imageMenuCanvasBackground" width="800" height="600"></canvas>
	</div>
    <div class="lightbox"><canvas id="lightboxCanvas" width="800" height="600"></canvas></div>
    <div class="group_aux"><canvas id="auxiliarImageCanvas" width="100" height="100"></canvas></div>
	<div class="file_open_list" id="file_open">
		<i class="fa fa-times" id="btn_close_open_state" onclick="btn_close_open_state_click()"></i>
		<table id="list_of_open_files">
		</table>
	</div>
	<div class="file_save_list" id="file_save">
		<i class="fa fa-times" id="btn_close_save_state" onclick="btn_close_save_state_click()"></i>
		<text id="label">File Name</text>
		<input type="text" id="textbox_file_name"></input>
		<i class="fa fa-floppy-o" id="btn_save_state" onclick="btn_save_state_click()"></i>
		<table id="list_of_files">
		</table>
	</div>
</body>
<script>
    function Group(name)
    {
        this.name = name;
        this.images = new Array;
        //this.thumbnail = new Image();
        //console.log(this.thumbnail);
        this.getThumbnail = function(callback) {
            var auxiliarImageCanvas = document.getElementById('auxiliarImageCanvas');
            var auxiliarImageContext = auxiliarImageCanvas.getContext('2d');

            auxiliarImageContext.clearRect( 0 , 0 , auxiliarImageCanvas.width, auxiliarImageCanvas.height );
            auxiliarImageContext.font = "20px Georgia";
            auxiliarImageContext.textAlign = "center";
            auxiliarImageContext.fillStyle = "#ffffff";
            auxiliarImageContext.fillText(this.name, auxiliarImageCanvas.width/2, 20, auxiliarImageCanvas.width);

            if (this.images.length > 0)
            {

            }

            //this.thumbnail.src = auxiliarImageCanvas.toDataURL();
            //this.thumbnail.onload = function(){
            //    console.log(this.thumbnail);
            //    callback();
            //}
            return auxiliarImageCanvas;
        };
    }
</script>
<script>
    var interfaceCanvas = document.getElementById('interfaceCanvas');
    var interfaceContext = interfaceCanvas.getContext('2d');

    var imageMenuCanvas = document.getElementById('imageMenuCanvas');
    var imageMenuContext = imageMenuCanvas.getContext('2d');

    var lightboxCanvas = new fabric.Canvas('lightboxCanvas');

    var current_menu_workspace;
	var workspace_hierarchy = "-1";

    var alpha = 0.5;
    var number_of_columns = 3;
    var marginx;
    var marginy;
    var offsetx;

    var selected_image = -1;
    var drag = false;
    var image_name_list = "{{=image_list}}";
    if (image_name_list.length > 0)
    {
        image_name_list = image_name_list.split(" ");
    }

    function getMousePosition(canvas, event)
    {
        var rect = canvas.getBoundingClientRect();
        return {
            x: event.pageX - rect.left,
            y: event.pageY - rect.top
        };
    }
	
	function isImage(element)
	{
		if (Object.prototype.toString.call(element).slice(8, -1) == 'HTMLImageElement')
		{
			return true;
		}
		
		return false;
	}
	
	function getMenuStateData(workspace)
	{
		var result = ""
		
		for (var i=0; i < workspace.length; i++)
		{
			if (isImage(workspace[i]))
			{
				temp = workspace[i].src;
				temp = temp.split("/");
				result = result + temp[temp.length - 1].substring(0, temp[temp.length - 1].length - 4) + "\n";
			}
			else
			{
				result = result + "\\" + workspace[i].name + "\n" + getMenuStateData(workspace[i].images) + "\\" + workspace[i].name + "\n";
			}
		}
		
		return result
	}
	
	function getStateData(workspace)
	{
		var temp;
		var result = "\\menu\n";
		
		result = result + getMenuStateData(workspace);
		
		result = result + "\\menu\n";
		result = result + "\\lightbox\n";
		result = result + JSON.stringify(lightboxCanvas) + "\n";
		result = result + "\\lightbox\n";
		
		return result;
	}

    function resizeImageMenu() {
        imageMenuCanvas.width = (window.innerWidth - (window.innerWidth * 0.03)) * 0.3;
        imageMenuCanvas.height = window.innerHeight - (window.innerHeight * 0.03);
		$('#imageMenuCanvasBackground').width(imageMenuCanvas.width);
		$('#imageMenuCanvasBackground').height(imageMenuCanvas.height);
		
        marginx = imageMenuCanvas.width * 0.016;
        marginy = marginx;//imageMenuCanvas.height * 0.025;
        offsetx = imageMenuCanvas.width * 0.3;//imageMenuCanvas.width * 0.08;

        var auxiliarImageCanvas = document.getElementById('auxiliarImageCanvas');
        auxiliarImageCanvas.width = offsetx;
        auxiliarImageCanvas.height = offsetx;

        lightboxCanvas.setWidth(window.innerWidth);
        lightboxCanvas.setHeight(window.innerHeight);

		$("#file_save").css("width", window.innerWidth);
		$("#file_save").css("height", window.innerHeight);
		$("#file_open").css("width", window.innerWidth);
		$("#file_open").css("height", window.innerHeight);
        //var fileListBackgroundCanvas = document.getElementById('file_list_background');
		//fileListBackgroundCanvas.width = window.innerWidth;
		//fileListBackgroundCanvas.height = window.innerHeight;
        /*imageMenuContext.globalAlpha = alpha;
		imageMenuContext.fillStyle = "#777777";
		imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
        imageMenuContext.globalAlpha = 1;*/
    }

    resizeImageMenu();

    function img(source)
    {
        this.data = new Image();
        this.data.src = source;
        this.data.onload = function() {
            this.width = this.data.width;
            this.height = this.data.height;
        }
        this.draw = function(x, y, sizex, sizey) {
            imageMenuContext.drawImage(this.data, x, y, sizex, sizey);
        }
        //    context.drawImage(imageObj, marginx + (marginx * 2 * i) + (offsetx * i), marginy, offsetx, (offsetx / this.width) * this.height);
    }

    var editableImageArray = new Array;
    var imageArray = [];
    var main_menu_workspace = [];
    current_menu_workspace = main_menu_workspace;

    for (var i = 0; i<image_name_list.length; i++)
    {
        imageArray.push("../static/images/user/" + image_name_list[i]);
    }
    //editableImageArray[0] = fabric.Image.fromURL(imageArray[2], function(loaded_img) { lightboxCanvas.add(loaded_img); });
    //editableImageArray[0] = fabric.Image.fromURL('../static/images/user/2.png', function(loaded_img) { lightboxCanvas.add(loaded_img); });

    function loadImages(arr, callBack){
        var count = 0;

        for (var i in arr ){
            current_menu_workspace[i] = new Image();
            current_menu_workspace[i].src = arr[i];
            current_menu_workspace[i].onload = function(){
                count++;
                if(count == arr.length){
                    callBack(current_menu_workspace);
                }
            }
        }
    }

    function imageLoaded() {
        var offsety;
        var temp;
        var img_width, img_height;

        imageMenuContext.clearRect( 0 , 0 , imageMenuCanvas.width, imageMenuCanvas.height );

        for (var i in current_menu_workspace) {
            offsety = 0;
            temp = i - number_of_columns + 1;
            while (temp > 0) {
                //offsety = offsety + (marginy * 2) + ((offsetx / img[temp-1].width) * img[temp-1].height);
                offsety = offsety + (marginy * 2) + offsetx;
                temp = temp - number_of_columns;
            }
            //context.drawImage(img[i], marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)), marginy + offsety, offsetx, (offsetx / img[i].width) * img[i].height);
            if (current_menu_workspace[i].width > current_menu_workspace[i].height)
            {
                img_width = offsetx;
                img_height = (offsetx / current_menu_workspace[i].width) * current_menu_workspace[i].height;
            }
            else
            {
                img_width = (offsetx / current_menu_workspace[i].height) * current_menu_workspace[i].width;
                img_height = offsetx;
            }
            if (Object.prototype.toString.call(current_menu_workspace[i]).slice(8, -1) == 'HTMLImageElement')
            {
                imageMenuContext.drawImage(current_menu_workspace[i], marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)) + ((offsetx - img_width) / 2), marginy + offsety + ((offsetx - img_height) / 2), img_width, img_height);
                //imageMenuContext.rect((marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)), offsety, offsetx + (marginx * 2), offsetx + (marginy * 2));
            }
            else
            {
                img_width = offsetx;
                img_height = offsetx;
                imageMenuContext.drawImage(current_menu_workspace[i].getThumbnail(), marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)) + ((offsetx - img_width) / 2), marginy + offsety + ((offsetx - img_height) / 2), img_width, img_height);
            }
        }
        imageMenuContext.stroke();
    }

    loadImages(imageArray, imageLoaded);

    function getImageMouseCollision(mousepos)
    {
        var result = -1;
        var temp = -1;
        for (var i = 1; i<number_of_columns+1; i++)
        {
            if (mousepos.x < i * (offsetx + 2 * marginx))
            {
                temp = i - 1;
                break;
            }
        }

        if (temp > -1)
        {
            var offsety = 0;
            var i;
            for (i = temp; i<current_menu_workspace.length; i = i + number_of_columns)
            {
                //width = (marginy * 2) + ((offsetx / img[i].width) * img[i].height);
                width = (marginy * 2) + offsetx;
                if (mousepos.y >= offsety && mousepos.y < offsety + width)
                {
                    result = i;
                    break;
                }
                offsety = offsety + width;
            }
            if (i >= current_menu_workspace.length)
            {
                result = -1;
            }
        }
        else
        {
            result = -1;
        }

        return result;
    }

    function mouseDownEvent(e)
    {
        var mousepos = getMousePosition(imageMenuCanvas, e);

        selected_image = getImageMouseCollision(mousepos);
        if (selected_image > -1)
        {
            drag = true;
            interfaceCanvas.style.zIndex = 10;
        }
    }
    function mouseRightClickEvent(e)
    {
		var mousepos = getMousePosition(imageMenuCanvas, e);

		e.preventDefault();

		selected_image = getImageMouseCollision(mousepos);
		if (selected_image > -1)
		{
			if (Object.prototype.toString.call(current_menu_workspace[selected_image]).slice(8, -1) != 'HTMLImageElement')
			{
				workspace_hierarchy = workspace_hierarchy + "/" + selected_image;
				$('#context_link').append(" > <a href='#' onclick='linkClick(\"" + workspace_hierarchy + "\");return false;'>" + current_menu_workspace[selected_image].name + "</a>");
				current_menu_workspace = current_menu_workspace[selected_image].images;
				imageLoaded();
			}
		}
    }
    function mouseMoveEvent(e)
    {
        if (drag)
        {
            //drawScreenWithRect(getMousePosition(imageMenuCanvas, e), false);
            drawScreenWithRect(getMousePosition(interfaceCanvas, e), false);
        }
    }
    function mouseUpEvent(e)
    {
        if (drag)
        {
            drag = false;

            var mousePosition = getMousePosition(interfaceCanvas, e);
            drop_image = getImageMouseCollision(mousePosition);
            if (drop_image > -1 && drop_image != selected_image)
            {
                if (Object.prototype.toString.call(current_menu_workspace[drop_image]).slice(8, -1) == 'HTMLImageElement')
                {
                    var temp_image = current_menu_workspace[selected_image];
                    current_menu_workspace[selected_image] = current_menu_workspace[drop_image];
                    current_menu_workspace[drop_image] = temp_image;
                }
                else
                {
                    current_menu_workspace[drop_image].images.push(current_menu_workspace[selected_image]);
                    current_menu_workspace.splice($.inArray(current_menu_workspace[selected_image], current_menu_workspace), 1);

                    imageLoaded();
                }
            }
            else if (drop_image = -1)
            {
                editableImageArray.push(new fabric.Image.fromURL(current_menu_workspace[selected_image].src, function(loaded_img) {
                    loaded_img.set('left', mousePosition.x - (loaded_img.getWidth() / 2)).set('top', mousePosition.y - (loaded_img.getHeight() / 2));
                    lightboxCanvas.add(loaded_img);
                }));
            }

            drawScreenWithRect(getMousePosition(interfaceCanvas, e), true);
        }
		interfaceContext.clearRect(0, 0, interfaceCanvas.width, interfaceCanvas.height);
        interfaceCanvas.style.zIndex = -1;
    }
	
	function linkClick(link)
	{
		$('#context_link').empty();
		workspace_hierarchy = "-1";
		$('#context_link').append("<a href='#' onclick='linkClick(\"-1\");return false;'>Main</a>");

		if (link == "-1")
		{
			current_menu_workspace = main_menu_workspace;
		}
		else
		{
			path = link.split('/');
			for (var i = 0; i < path.length; i++)
			{
				if (parseInt(path[i]) < 0)
				{
					current_menu_workspace = main_menu_workspace;
				}
				else
				{
					workspace_hierarchy = workspace_hierarchy + '/' + path[i];
					$('#context_link').append(" > <a href='#' onclick='linkClick(\"" + workspace_hierarchy + "\");return false;'>" + current_menu_workspace[parseInt(path[i])].name + "</a>");
					current_menu_workspace = current_menu_workspace[parseInt(path[i])].images;
				}
			}
		}
		imageLoaded();
	}

    imageMenuCanvas.onmousedown = mouseDownEvent;
	//imageMenuCanvas.oncontextmenu = mouseRightClickEvent;
	imageMenuCanvas.addEventListener('contextmenu', mouseRightClickEvent, false); 
    //imageMenuCanvas.onmousemove = mouseMoveEvent;
    //imageMenuCanvas.onmouseup = mouseUpEvent;
    interfaceCanvas.onmousemove = mouseMoveEvent;
    interfaceCanvas.onmouseup = mouseUpEvent;

	function drawScreenWithRect(mousepos, erase) {
        //imageMenuContext.clearRect( 0 , 0 , imageMenuCanvas.width, imageMenuCanvas.height );
		/*imageMenuContext.fillStyle = "#ffffff";
		imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
        imageMenuContext.globalAlpha = alpha;
		imageMenuContext.fillStyle = "#777777";
		imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
        imageMenuContext.globalAlpha = 1;*/

		imageLoaded();

        if (!erase)
        {
            interfaceContext.clearRect( 0 , 0 , interfaceCanvas.width, interfaceCanvas.height );
            interfaceContext.fillStyle = "#0000ff"
            interfaceContext.fillRect(mousepos.x - 10, mousepos.y - 10, 20, 20);
            //imageMenuContext.fillStyle = "#0000ff";
            //imageMenuContext.fillRect(mousepos.x - 10, mousepos.y - 10, 20, 20);
        }
	}

    function upload_button_click() {
        $('#images').click();
    }

    function show_add_group_button_click() {
        if ($('#group_name_input').css("visibility") == "hidden")
        {
            $('#group_name_input').css("visibility","visible");
        }
        else
        {
            $('#group_name_input').css("visibility","hidden");
            $('#textbox_group_name').val("");
        }
    }

    function add_group_button_click() {
        if ($('#textbox_group_name').val() != "")
        {
            current_menu_workspace.push(new Group($('#textbox_group_name').val()));
            $('#textbox_group_name').val("");
            $('#group_name_input').css("visibility","hidden");

            /*imageMenuContext.fillStyle = "#ffffff";
            imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
            imageMenuContext.globalAlpha = alpha;
            imageMenuContext.fillStyle = "#777777";
            imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
            imageMenuContext.globalAlpha = 1;*/
            imageLoaded();
        }
    }
	
	function open_state_button_click() {
		$.get("state_list", function( data ) {
			var filenames = JSON.parse(data);
			
			$('#list_of_open_files').html("<tr><th>File</th><th>Date</th></tr>");
			for (var i = 0; i < filenames.length; i++)
			{
				$('#list_of_open_files').append("<tr class=\"row\"><td><i class=\"fa fa-file-o\"></i> " + filenames[i][0] + "</td><td style=\"text-align: center;\">" + filenames[i][1] + "</td></tr>");
			}

			var rows = $('.row');

			rows.on('click', function(e) {
				var row = $(this);

				rows.removeClass('highlight');
				row.addClass('highlight');
				//console.log(row.text());
				//$('#file_name').text(row.text());
			});
			
			rows.on('dblclick', function(e) {
				var row = $(this);
				var content = row.html();
				var filename;
				
				content = content.split('</i> ');
				filename = (content[1].split('</td>'))[0];
				
				$.ajax({
					url: "{{=URL('default', 'open_state')}}",
					type: "POST",
					data: "filename=" + JSON.stringify(filename),
					success: function (data)
					{
						console.log(data);
                        lightboxCanvas.loadFromJSON(data[], lightboxCanvas.renderAll.bind(lightboxCanvas));
					},
					error: function (data)
					{
						//console.log(data.responseText);
					}
				});
			});
			
			$('#file_open').css("visibility", "visible");
			$('#file_open').css("z-index", "6");
		});
	}
	
	function save_state_button_click() {
		$.get("state_list", function( data ) {
			var filenames = JSON.parse(data);
			
			$('#list_of_files').html("<tr><th>File</th><th>Date</th></tr>");
			for (var i = 0; i < filenames.length; i++)
			{
				$('#list_of_files').append("<tr><td><i class=\"fa fa-file-o\"></i> " + filenames[i][0] + "</td><td style=\"text-align: center;\">" + filenames[i][1] + "</td></tr>");
			}
			
			$('#file_save').css("visibility", "visible");
			$('#file_save').css("z-index", "6");
		});
	}
	
    function handleFileSelect(evt) {
        var images = evt.target.files;

        for (var i = 0, temp_img; temp_img = images[i]; i++) {
            var reader = new FileReader();

            reader.onload = (function(image) {
                return function(e) {
                    //console.log('1');
                    var result = encodeURIComponent(e.target.result.match(/,(.*)$/)[1]);
                    //console.log(' 2');
                    $.ajax({
                        url: "{{=URL('default', 'upload')}}",
                        type: "POST",
                        data: "data=" + JSON.stringify(result),
                        success: function (data)
                        {
                            imageArray.push("../static/images/user/" + data);
                            current_menu_workspace.push(new Image());
                            current_menu_workspace[current_menu_workspace.length - 1].src = imageArray[imageArray.length - 1];
                            current_menu_workspace[current_menu_workspace.length - 1].onload = function(){
                                imageMenuContext.fillStyle = "#ffffff";
                                imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
                                imageLoaded();
                            }
                            //console.log(data);
                        },
                        error: function (data)
                        {
                            //console.log(data.responseText);
                        }
                    });
                    //console.log('  3');
                };
            })(temp_img);

            reader.readAsDataURL(temp_img);
        }
    }

    document.getElementById('images').addEventListener('change', handleFileSelect, false);
	
	function btn_save_state_click()
	{
		if ($('#textbox_file_name').val() != "")
        {
			$.ajax({
				url: "{{=URL('default', 'save_state')}}",
				type: "POST",
				data: "data=" + JSON.stringify(getStateData(main_menu_workspace)) + "&filename=" + $('#textbox_file_name').val(),
				success: function (data)
				{
					$('#file_save').css("visibility", "hidden");
					$('#file_save').css("z-index", "-2");
					$('#textbox_file_name').val("");
				},
				error: function (data)
				{
					//console.log(data.responseText);
				}
			});
		}
	}
	
	function btn_close_open_state_click()
	{
		$('#file_open').css("visibility", "hidden");
		$('#file_open').css("z-index", "-2");
	}
	function btn_close_save_state_click()
	{
		$('#file_save').css("visibility", "hidden");
		$('#file_save').css("z-index", "-2");
		$('#textbox_file_name').val("");
	}
</script>
