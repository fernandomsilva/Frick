<head>
    <script language="javascript" type="text/javascript" src="../static/js/jquery_min.js"></script>
    <script language="javascript" type="text/javascript" src="../static/js/fabric_min.js"></script>
    <link rel="stylesheet" type="text/css" href="../static/css/font-awesome_min.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="../static/css/canvas.css" media="screen" />
</head>
<body>
    <form>
        <input type="file" id="images" name="images[]" style="display: none;" multiple></input>
    </form>
    <div id="buttons" class="buttons">
        <i class="fa fa-upload" id="btn_upload" onclick="upload_button_click()"></i>
        <i class="fa fa-plus-square" id="btn_show_add_group" onclick="show_add_group_button_click()"></i>
        <div id="group_name_input" class="group_name_input">
            <input type="text" id="textbox_group_name"></input>
            <i class="fa fa-plus" id="btn_add_group" onclick="add_group_button_click()"></i>
        </div>
    </div>
    <div class="interface"><canvas id="interfaceCanvas" width="800" height="600"></canvas></div>
    <div class="imageMenu">
        <canvas id="imageMenuCanvas" width="800" height="600"></canvas>
        <canvas id="imageMenuCanvasBackground" width="800" height="600"></canvas>
    </div>
    <div class="lightbox"><canvas id="lightboxCanvas" width="800" height="600"></canvas></div>
    <div class="group_aux"><canvas id="auxiliarImageCanvas" width="100" height="100"></canvas></div>
</body>
<script>
    function Group(name)
    {
        this.name = name;
        this.images = new Array;
        //this.thumbnail = new Image();
        //console.log(this.thumbnail);
        this.getThumbnail = function(callback) {
            var auxiliarImageCanvas = document.getElementById('auxiliarImageCanvas');
            var auxiliarImageContext = auxiliarImageCanvas.getContext('2d');

            auxiliarImageContext.clearRect( 0 , 0 , auxiliarImageCanvas.width, auxiliarImageCanvas.height );
            auxiliarImageContext.font = "20px Georgia";
            auxiliarImageContext.textAlign = "center";
            auxiliarImageContext.fillStyle = "#000000";
            auxiliarImageContext.fillText(this.name, auxiliarImageCanvas.width/2, 20, auxiliarImageCanvas.width);

            if (this.images.length > 0)
            {

            }

            //this.thumbnail.src = auxiliarImageCanvas.toDataURL();
            //this.thumbnail.onload = function(){
            //    console.log(this.thumbnail);
            //    callback();
            //}
            return auxiliarImageCanvas;
        };
    }
</script>
<script>
    var interfaceCanvas = document.getElementById('interfaceCanvas');
    var interfaceContext = interfaceCanvas.getContext('2d');

    var imageMenuCanvas = document.getElementById('imageMenuCanvas');
    var imageMenuContext = imageMenuCanvas.getContext('2d');

    var lightboxCanvas = new fabric.Canvas('lightboxCanvas');

    var current_menu_workspace;

    var alpha = 0.5;
    var number_of_columns = 3;
    var marginx;
    var marginy;
    var offsetx;

    var selected_image = -1;
    var drag = false;
    var image_name_list = "{{=image_list}}";
    if (image_name_list.length > 0)
    {
        image_name_list = image_name_list.split(" ");
    }

    function getMousePosition(canvas, event)
    {
        var rect = canvas.getBoundingClientRect();
        return {
            x: event.pageX - rect.left,
            y: event.pageY - rect.top
        };
    }

    function resizeImageMenu() {
        imageMenuCanvas.width = (window.innerWidth - (window.innerWidth * 0.03)) * 0.3;
        imageMenuCanvas.height = window.innerHeight - (window.innerHeight * 0.03);
        marginx = imageMenuCanvas.width * 0.016;
        marginy = marginx;//imageMenuCanvas.height * 0.025;
        offsetx = imageMenuCanvas.width * 0.3;//imageMenuCanvas.width * 0.08;

        var auxiliarImageCanvas = document.getElementById('auxiliarImageCanvas');
        auxiliarImageCanvas.width = offsetx;
        auxiliarImageCanvas.height = offsetx;

        lightboxCanvas.setWidth(window.innerWidth);
        lightboxCanvas.setHeight(window.innerHeight);

        /*imageMenuContext.globalAlpha = alpha;
		imageMenuContext.fillStyle = "#777777";
		imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
        imageMenuContext.globalAlpha = 1;*/
    }

    resizeImageMenu();

    function img(source)
    {
        this.data = new Image();
        this.data.src = source;
        this.data.onload = function() {
            this.width = this.data.width;
            this.height = this.data.height;
        }
        this.draw = function(x, y, sizex, sizey) {
            imageMenuContext.drawImage(this.data, x, y, sizex, sizey);
        }
        //    context.drawImage(imageObj, marginx + (marginx * 2 * i) + (offsetx * i), marginy, offsetx, (offsetx / this.width) * this.height);
    }

    var editableImageArray = new Array;
    var imageArray = [];
    var img = [];
    current_menu_workspace = img;

    for (var i = 0; i<image_name_list.length; i++)
    {
        imageArray.push("../static/images/user/" + image_name_list[i]);
    }
    //editableImageArray[0] = fabric.Image.fromURL(imageArray[2], function(loaded_img) { lightboxCanvas.add(loaded_img); });
    //editableImageArray[0] = fabric.Image.fromURL('../static/images/user/2.png', function(loaded_img) { lightboxCanvas.add(loaded_img); });

    function loadImages(arr, callBack){
        var count = 0;

        for (var i in arr ){
            img[i] = new Image();
            img[i].src = arr[i];
            img[i].onload = function(){
                count++;
                if(count == arr.length){
                    callBack(img);
                }
            }
        }
    }

    function imageLoaded() {
        var offsety;
        var temp;
        var img_width, img_height;

        imageMenuContext.clearRect( 0 , 0 , imageMenuCanvas.width, imageMenuCanvas.height );

        for (var i in current_menu_workspace) {
            offsety = 0;
            temp = i - number_of_columns + 1;
            while (temp > 0) {
                //offsety = offsety + (marginy * 2) + ((offsetx / img[temp-1].width) * img[temp-1].height);
                offsety = offsety + (marginy * 2) + offsetx;
                temp = temp - number_of_columns;
            }
            //context.drawImage(img[i], marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)), marginy + offsety, offsetx, (offsetx / img[i].width) * img[i].height);
            if (current_menu_workspace[i].width > current_menu_workspace[i].height)
            {
                img_width = offsetx;
                img_height = (offsetx / current_menu_workspace[i].width) * current_menu_workspace[i].height;
            }
            else
            {
                img_width = (offsetx / current_menu_workspace[i].height) * current_menu_workspace[i].width;
                img_height = offsetx;
            }
            if (Object.prototype.toString.call(current_menu_workspace[i]).slice(8, -1) == 'HTMLImageElement')
            {
                imageMenuContext.drawImage(current_menu_workspace[i], marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)) + ((offsetx - img_width) / 2), marginy + offsety + ((offsetx - img_height) / 2), img_width, img_height);
                //imageMenuContext.rect((marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)), offsety, offsetx + (marginx * 2), offsetx + (marginy * 2));
            }
            else
            {
                img_width = offsetx;
                img_height = offsetx;
                imageMenuContext.drawImage(current_menu_workspace[i].getThumbnail(), marginx + (marginx * 2 * (i % number_of_columns)) + (offsetx * (i % number_of_columns)) + ((offsetx - img_width) / 2), marginy + offsety + ((offsetx - img_height) / 2), img_width, img_height);
            }
        }
        imageMenuContext.stroke();
    }

    loadImages(imageArray, imageLoaded);

    function getImageMouseCollision(mousepos)
    {
        var result = -1;
        var temp = -1;
        for (var i = 1; i<number_of_columns+1; i++)
        {
            if (mousepos.x < i * (offsetx + 2 * marginx))
            {
                temp = i - 1;
                break;
            }
        }

        if (temp > -1)
        {
            var offsety = 0;
            var i;
            for (i = temp; i<img.length; i = i + number_of_columns)
            {
                //width = (marginy * 2) + ((offsetx / img[i].width) * img[i].height);
                width = (marginy * 2) + offsetx;
                if (mousepos.y >= offsety && mousepos.y < offsety + width)
                {
                    result = i;
                    break;
                }
                offsety = offsety + width;
            }
            if (i >= img.length)
            {
                result = -1;
            }
        }
        else
        {
            result = -1;
        }

        return result;
    }

    function mouseDownEvent(e)
    {
        var mousepos = getMousePosition(imageMenuCanvas, e);

        selected_image = getImageMouseCollision(mousepos);
        if (selected_image > -1)
        {
            drag = true;
            interfaceCanvas.style.zIndex = 3;
        }
    }
    function mouseMoveEvent(e)
    {
        if (drag)
        {
            //drawScreenWithRect(getMousePosition(imageMenuCanvas, e), false);
            drawScreenWithRect(getMousePosition(interfaceCanvas, e), false);
        }
    }
    function mouseUpEvent(e)
    {
        if (drag)
        {
            drag = false;

            var mousePosition = getMousePosition(interfaceCanvas, e);
            drop_image = getImageMouseCollision(mousePosition);
            if (drop_image > -1 && drop_image != selected_image)
            {
                if (Object.prototype.toString.call(img[drop_image]).slice(8, -1) == 'HTMLImageElement')
                {
                    var temp_image = img[selected_image];
                    img[selected_image] = img[drop_image];
                    img[drop_image] = temp_image;
                }
                else
                {
                    img[drop_image].images.push(img[selected_image]);
                    img.splice($.inArray(img[selected_image], img), 1);

                    console.log(img[drop_image - 1]);

                    imageLoaded();
                }
            }
            else if (drop_image = -1)
            {
                editableImageArray.push(new fabric.Image.fromURL(img[selected_image].src, function(loaded_img) {
                    loaded_img.set('left', mousePosition.x - (loaded_img.getWidth() / 2)).set('top', mousePosition.y - (loaded_img.getHeight() / 2));
                    lightboxCanvas.add(loaded_img);
                }));
            }

            drawScreenWithRect(getMousePosition(interfaceCanvas, e), true);
        }
		interfaceContext.clearRect(0, 0, interfaceCanvas.width, interfaceCanvas.height);
        interfaceCanvas.style.zIndex = -1;
    }

    imageMenuCanvas.onmousedown = mouseDownEvent;
    //imageMenuCanvas.onmousemove = mouseMoveEvent;
    //imageMenuCanvas.onmouseup = mouseUpEvent;
    interfaceCanvas.onmousemove = mouseMoveEvent;
    interfaceCanvas.onmouseup = mouseUpEvent;

	function drawScreenWithRect(mousepos, erase) {
        //imageMenuContext.clearRect( 0 , 0 , imageMenuCanvas.width, imageMenuCanvas.height );
		/*imageMenuContext.fillStyle = "#ffffff";
		imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
        imageMenuContext.globalAlpha = alpha;
		imageMenuContext.fillStyle = "#777777";
		imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
        imageMenuContext.globalAlpha = 1;*/

		imageLoaded();

        if (!erase)
        {
            interfaceContext.clearRect( 0 , 0 , interfaceCanvas.width, interfaceCanvas.height );
            interfaceContext.fillStyle = "#0000ff"
            interfaceContext.fillRect(mousepos.x - 10, mousepos.y - 10, 20, 20);
            //imageMenuContext.fillStyle = "#0000ff";
            //imageMenuContext.fillRect(mousepos.x - 10, mousepos.y - 10, 20, 20);
        }
	}

    function upload_button_click() {
        $('#images').click();
    }

    function show_add_group_button_click() {
        if ($('#group_name_input').css("visibility") == "hidden")
        {
            $('#group_name_input').css("visibility","visible");
        }
        else
        {
            $('#group_name_input').css("visibility","hidden");
            $('#textbox_group_name').val("");
        }
    }

    function add_group_button_click() {
        if ($('#textbox_group_name').val() != "")
        {
            img.push(new Group($('#textbox_group_name').val()));
            $('#textbox_group_name').val("");
            $('#group_name_input').css("visibility","hidden");

            /*imageMenuContext.fillStyle = "#ffffff";
            imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
            imageMenuContext.globalAlpha = alpha;
            imageMenuContext.fillStyle = "#777777";
            imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
            imageMenuContext.globalAlpha = 1;*/
            imageLoaded();
        }
    }

    function handleFileSelect(evt) {
        var images = evt.target.files;

        for (var i = 0, temp_img; temp_img = images[i]; i++) {
            var reader = new FileReader();

            reader.onload = (function(image) {
                return function(e) {
                    //console.log('1');
                    var result = encodeURIComponent(e.target.result.match(/,(.*)$/)[1]);
                    //console.log(' 2');
                    $.ajax({
                        url: "{{=URL('default', 'upload')}}",
                        type: "POST",
                        data: "data=" + JSON.stringify(result),
                        success: function (data)
                        {
                            imageArray.push("../static/images/user/" + data);
                            img.push(new Image());
                            img[img.length - 1].src = imageArray[imageArray.length - 1];
                            img[img.length - 1].onload = function(){
                                imageMenuContext.fillStyle = "#ffffff";
                                imageMenuContext.fillRect(0, 0, imageMenuCanvas.width, imageMenuCanvas.height);
                                imageLoaded();
                            }
                            //console.log(data);
                        },
                        error: function (data)
                        {
                            //console.log(data.responseText);
                        }
                    });
                    //console.log('  3');
                };
            })(temp_img);

            reader.readAsDataURL(temp_img);
        }
    }

    document.getElementById('images').addEventListener('change', handleFileSelect, false);
</script>
